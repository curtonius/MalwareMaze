using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class GameManager : MonoBehaviour 
{
	//Static instance of the GameManager
	public static GameManager Instance;

	//The text variables to write to when statuses change
	public Text scoreText;
	public Text batteryText;

	//The CrackedScreen gameobject to activate when the player dies
	public GameObject crackedScreen;

	//The top/bottom bar to open up the game
	public RectTransform topBar;
	public RectTransform bottomBar;

	//The death sound
	public AudioSource dead;


	//Scores
	int score;
	int battery=100;

	// Use this for initialization
	void Start () {
		Instance = this;

		if (scoreText != null)
		{
			//Set bars to default closed positions
			topBar.anchoredPosition = new Vector2(0, -Screen.height / 2 - 5);
			bottomBar.anchoredPosition = new Vector2(0, Screen.height / 2);

			//Open the bars
			StartCoroutine(OpenBars());
		}
	}

	IEnumerator OpenBars()
	{
		//Disable projectileLaunchers until game is ready
		ProjectileLauncher[] launchers = FindObjectsOfType<ProjectileLauncher>();
		foreach (ProjectileLauncher launcher in launchers)
		{
			launcher.enabled = false;
			if (launcher.GetComponent<Enemy>())
			{
				launcher.GetComponent<Enemy>().enabled = false;
			}
		}

		yield return new WaitForSeconds(0.5f);

		//Open up the bars
		Vector2 topBarOriginal = topBar.anchoredPosition;
		Vector2 bottomBarOriginal = bottomBar.anchoredPosition;

		Vector2 topBarNew = topBar.anchoredPosition + new Vector2(0, Screen.height / 2 + 5);
		Vector2 bottomBarNew = bottomBar.anchoredPosition - new Vector2(0, Screen.height / 2);
		float t = 0;

		while (t < 1)
		{
			t += Time.deltaTime;

			topBar.anchoredPosition = Vector2.Lerp(topBarOriginal, topBarNew, t);
			bottomBar.anchoredPosition = Vector2.Lerp(bottomBarOriginal, bottomBarNew, t);

			yield return null;
		}

		//Start the battery life
		if (batteryText != null)
		{
			StartCoroutine(DoBattery());
		}

		//Re-enable projectile launchers
		launchers = FindObjectsOfType<ProjectileLauncher>();
		foreach (ProjectileLauncher launcher in launchers)
		{
			launcher.enabled = true;
			if (launcher.GetComponent<Enemy>())
			{
				launcher.GetComponent<Enemy>().enabled = true;
			}
		}


		yield return null;
	}

	//If tutorial has been finished
	public void FinishTutorial()
	{
		StartCoroutine(EndGame());
	}

	//Change the score value and the text associated with it
	public void UpdateScore(int amount)
	{
		score += amount;
		scoreText.text = "Score: " + score.ToString();
	}

	//Refill the battery
	public void FillBattery()
	{
		battery = 100;
		batteryText.text = "Battery: " + battery.ToString() + "%";
	}

	//Change the battery value and the text associated with it

	public void UpdateBattery(int amount)
	{
		battery = Mathf.Clamp(battery+amount, 0, 100);
		batteryText.text = "Battery: " + battery.ToString() + "%";

		if(battery == 0)
		{
			StartCoroutine(EndGame());
		}
	}

	//Over time drain the battery
	IEnumerator DoBattery()
	{
		while(battery > 0)
		{
			yield return new WaitForSeconds(MazeGenerator.Instance.width);
			battery -= 1;
			batteryText.text = "Battery: " + battery.ToString() + "%";
		}

		//If the player loses their battery power, end the game
		StartCoroutine(EndGame());

		yield return null;
	}

	//Place a collider at a position the player/enemy is moving to to prevent other enemies/player from moving into that same spot
	public void PlaceCollider(Vector3 position, string tag)
	{
		GameObject newObject = new GameObject();
		newObject.tag = tag;
		BoxCollider box = newObject.AddComponent<BoxCollider>();
		box.isTrigger = true;
		box.size = new Vector3(3, 3, 3);
		newObject.transform.position = position;

		Destroy(newObject, 1);
	}

	//Activate the end game
	IEnumerator EndGame()
	{
		if (!crackedScreen.activeSelf)
		{
			//Crack the screen
			crackedScreen.SetActive(true);

			//Disable the projectile launchers
			ProjectileLauncher[] launchers = FindObjectsOfType<ProjectileLauncher>();
			foreach(ProjectileLauncher launcher in launchers)
			{
				launcher.enabled = false;
				if (launcher.GetComponent<Enemy>())
				{
					launcher.GetComponent<Enemy>().enabled = false;
				}
				if (launcher.GetComponent<MovementScript>())
				{
					launcher.GetComponent<MovementScript>().enabled = false;
				}
			}

			//If the score is greater than the highscore then say as much
			if(score > Highscore.highscore)
			{
				scoreText.text = "Highscore: " + score.ToString();
				Highscore.highscore = score;
				Highscore.Save();
			}

			yield return new WaitForSeconds(0.5f);

			//Close the bars
			float t = 0;

			Vector2 topBarOriginal = topBar.anchoredPosition;
			Vector2 bottomBarOriginal = bottomBar.anchoredPosition;

			Vector2 topBarNew = topBar.anchoredPosition - new Vector2(0, Screen.height / 2 + 5);
			Vector2 bottomBarNew = bottomBar.anchoredPosition + new Vector2(0, Screen.height / 2);

			//Play the dead sound
			dead.Play();
			while (t < 1)
			{
				t += Time.deltaTime;

				topBar.anchoredPosition = Vector2.Lerp(topBarOriginal, topBarNew, t);
				bottomBar.anchoredPosition = Vector2.Lerp(bottomBarOriginal, bottomBarNew, t);

				yield return null;
			}

			t = 0;

			//Display the score
			Vector2 scorePosition = scoreText.rectTransform.anchoredPosition;
			Vector2 scoreSize = scoreText.rectTransform.sizeDelta;

			Vector2 scorePositionNew = new Vector2(0, -Screen.height / 2);
			Vector2 scoreSizeNew = scoreSize * 2;

			while (t < 1)
			{
				t += Time.deltaTime;

				scoreText.rectTransform.anchoredPosition = Vector2.Lerp(scorePosition, scorePositionNew, t);
				scoreText.rectTransform.sizeDelta = Vector2.Lerp(scoreSize, scoreSizeNew, t);

				yield return null;
			}

			yield return new WaitForSeconds(1);

			t = 0;
			scorePosition = scoreText.rectTransform.anchoredPosition;
			scorePositionNew = new Vector2(Screen.width, -Screen.height / 2);
			while (t < 1)
			{
				t += Time.deltaTime;

				scoreText.rectTransform.anchoredPosition = Vector2.Lerp(scorePosition, scorePositionNew, t);

				yield return null;
			}

			yield return new WaitForSeconds(1);

			//Go back to the Main menu
			SceneManager.LoadScene(0);
		}
		yield return null;
	}
}
