using Boo.Lang;
using UnityEngine;

public class MovementScript : MonoBehaviour
{
    //The camera transform for the player
    public Transform cameraTransform;

    //The original and next positions/rotations of the player
    private Vector3 nextPosition;
    private Vector3 originalPosition;
    private Quaternion nextRotation;
    private Quaternion originalRotation;
    private float currentTime;

    //The audio sources for the player
    public AudioSource drivingSource;
    public AudioSource endDriveSource;
    public AudioSource turningSource;

    //All audiosources to play again when the game is unpaused
    public static List<AudioSource> pausedAudioSources = new List<AudioSource>();

    private float mouseXMovement = 0;
    private Rigidbody rigidbody;

    //Stop all audios and reset all positions/rotations
    public void Clear()
    {
        drivingSource.Stop();
        endDriveSource.Stop();
        turningSource.Stop();

        nextPosition = transform.position;
        nextRotation = transform.rotation;
        originalPosition = transform.position;
        originalRotation = transform.rotation;
        currentTime = 0;
        mouseXMovement = 0;
    }

    // Start is called before the first frame update
    void Start()
    {
        //Set up camera
        if (!cameraTransform)
        {
            cameraTransform = Camera.main.transform;
            cameraTransform.parent = transform;
            cameraTransform.localPosition = new Vector3(0, 0.75f, 0);
        }

        //Set up Rigidbody
        rigidbody = GetComponent<Rigidbody>();
        if (!rigidbody)
        {
            rigidbody = gameObject.AddComponent<Rigidbody>();
            rigidbody.useGravity = false;
            rigidbody.constraints = RigidbodyConstraints.FreezeRotation;
        }

        //Lock the mouse
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;

        originalRotation = transform.rotation;
        nextRotation = originalRotation;
        originalPosition = transform.position;
        nextPosition = originalPosition;
    }

    // Update is called once per frame
    void Update()
    {
        /*if (Input.GetAxisRaw("Mouse Y") != 0)
        {
            angle = angle + Input.GetAxisRaw("Mouse Y") * -cameraSensitivity;
            angle = Mathf.Clamp(angle, -45, 45);
            cameraTransform.localRotation = Quaternion.Euler(angle, 0, 0);
        }*/

        //Pause/Unpause
        if(Input.GetKeyDown(KeyCode.Escape))
        {
            if (Time.timeScale == 1)
            {
                AudioSource[] audioSources = FindObjectsOfType<AudioSource>();
                foreach (AudioSource source in audioSources)
                {
                    if(source.isPlaying)
                    {
                        source.Pause();
                        pausedAudioSources.Add(source);
                    }
                }

                Cursor.lockState = CursorLockMode.None;
                Cursor.visible = true;
                Time.timeScale = 0;
            }
            else
            {
                foreach (AudioSource source in pausedAudioSources)
                {
                    source.Play();
                }
                pausedAudioSources = new List<AudioSource>();

                Cursor.lockState = CursorLockMode.Locked;
                Cursor.visible = false;
                Time.timeScale = 1;
            }
        }

        if(Time.timeScale == 0)
        {
            return;
        }

        //If the player is turning
        if (transform.rotation == nextRotation && transform.position == nextPosition)
        {
            mouseXMovement += Input.GetAxisRaw("Mouse X");
            if (mouseXMovement < -20)
            {
                turningSource.Play();
                mouseXMovement = 0;
                nextRotation = Quaternion.Euler(transform.rotation.eulerAngles + new Vector3(0, -90, 0));
            }
            else if (mouseXMovement > 20)
            {
                turningSource.Play();
                mouseXMovement = 0;
                nextRotation = Quaternion.Euler(transform.rotation.eulerAngles + new Vector3(0, 90, 0));
            }
        }
        else
        {
            if (transform.rotation != nextRotation)
            {
                currentTime += Time.deltaTime;
                transform.rotation = Quaternion.Lerp(originalRotation, nextRotation, currentTime);
                if (currentTime >= 1)
                {
                    transform.rotation = nextRotation;
                    originalRotation = transform.rotation;
                    currentTime = 0;
                }
            }
        }

        //If the player is moving
        if (transform.rotation == nextRotation && transform.position == nextPosition)
        {
            if (Input.GetAxisRaw("Vertical") != 0)
            {
                Vector3 direction = transform.forward * Input.GetAxisRaw("Vertical");
                if (!Physics.Raycast(transform.position, direction, 5))
                {
                    nextPosition = transform.position + direction * 5;
                    GameManager.Instance.PlaceCollider(transform.position + direction * 5, tag);
                }
                else
                {
                    drivingSource.Stop();
                }
            }
            else if (Input.GetAxisRaw("Horizontal") != 0)
            {
                Vector3 direction = transform.right * Input.GetAxisRaw("Horizontal");
                if (!Physics.Raycast(transform.position, direction, 5))
                {
                    nextPosition = transform.position + direction * 5;
                    GameManager.Instance.PlaceCollider(transform.position + direction * 5, tag);
                }
                else
                {
                    drivingSource.Stop();
                }
            }
        }
        else
        {
            if (transform.position != nextPosition)
            {
                if (!drivingSource.isPlaying)
                {
                    drivingSource.Play();
                }
                currentTime += Time.deltaTime;
                transform.position = Vector3.Lerp(originalPosition, nextPosition, currentTime);
                if (currentTime >= 1)
                {
                    transform.position = nextPosition;
                    originalPosition = transform.position;
                    currentTime = 0;

                    if(Input.GetAxisRaw("Horizontal") == 0 && Input.GetAxisRaw("Vertical") ==0)
                    {
                        drivingSource.Stop();
                        endDriveSource.Play();
                    }
                }
            }
        }
    }
}
